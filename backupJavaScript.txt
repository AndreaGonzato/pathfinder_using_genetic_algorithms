let canvas = document.getElementById("myCanvas");
let c = canvas.getContext("2d");

//define the space
canvas.width = innerWidth
canvas.height = innerHeight


const mouse = {
  x: 1,
  y: 1
}

const colors = ['#2185C5', '#7ECEFD', '#FFF6E5', '#FF7F66']

// Event Listeners, update mouse pos when it moves
addEventListener('mousemove', (event) => {
  mouse.x = event.clientX
  mouse.y = event.clientY
})

// Event Listeners, update canvas size after a resize
addEventListener('resize', () => {
  canvas.width = innerWidth
  canvas.height = innerHeight

  init()
})

//deteminate distance from 2 points
function getDistance(x1, y1, x2, y2){
    let xDistance = x2 - x1;
    let yDistance = y2 - y1;

    return Math.sqrt( Math.pow(xDistance, 2) + Math.pow(yDistance, 2));
}


// Object Circle
class Circle {
  constructor(x, y, radius, color) {
    this.x = x
    this.y = y
    this.radius = radius
    this.color = color
  }

  draw() {
    c.beginPath()
    c.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false)
    c.fillStyle = this.color
    c.fill()
    c.closePath()
  }

  update() {
    this.draw()
  }
}

// IMPLEMENTATION
let circle1;
let circle2;

function init() {
  circle1 = new Circle(500, 300, 30, 'black');
  circle2 = new Circle(undefined, undefined, 30, 'red');
}

// Animation Loop
function animate() {
  requestAnimationFrame(animate)

  //cleare canvas
  c.clearRect(0, 0, canvas.width, canvas.height)

  //drow big rect
  c.beginPath();
  c.lineWidth = "3";
  c.strokeStyle = "red";
  c.rect(10, 10, canvas.width-30, canvas.height-25);
  c.stroke();
  c.closePath();


  //update and drow circle1
  circle1.update();

  //update and drow circle2
  circle2.x = mouse.x;
  circle2.y = mouse.y;
  circle2.update();

  //determinate contact
  if(getDistance(circle1.x, circle1.y, circle2.x, circle2.y) < circle1.radius +circle2.radius){
      circle1.color = 'red';
  } else {
      circle1.color = 'black';
  }

}

init()
animate()
